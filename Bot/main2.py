from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# Conversation states
IMAGE, NAME, PHONE, ADDRESS, MATERIAL, QUANTITY, TIME, PRICE = range(8)

# Dictionary to store user data temporarily
user_data = {}

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("‡§Æ‡•à‡§Ç Scrap Bot ‡§π‡•Ç‡§Å, ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡§¨‡§æ‡§°‡§º ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§ï‡•ã ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü www.theScrapCo.com ‡§™‡§∞ ‡§∏‡•Ç‡§ö‡•Ä‡§¨‡§¶‡•ç‡§ß ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ‡•§\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡§¨‡§æ‡§°‡§º ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§ï‡•Ä ‡§è‡§ï ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç")
        return IMAGE

async def image_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.photo:
        user_data["image"] = update.message.photo[-1].file_id
        await update.message.reply_text("‚úÖ ‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç")
        return NAME
    elif update.message:
        await update.message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç")
        return IMAGE

async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        user_data["name"] = update.message.text
        await update.message.reply_text("‚úÖ ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç")
        return PHONE

async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        user_data["phone"] = update.message.text
        await update.message.reply_text("‚úÖ ‡§™‡§§‡§æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç")
        return ADDRESS

async def address_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        user_data["address"] = update.message.text
        await update.message.reply_text("‚úÖ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç")
        return MATERIAL

async def material_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        user_data["material"] = update.message.text
        await update.message.reply_text("‚úÖ ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ (‡§µ‡§ú‡§º‡§®) ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç")
        return QUANTITY

async def quantity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        user_data["quantity"] = update.message.text
        await update.message.reply_text("‚úÖ ‡§™‡§ø‡§ï‡§Ö‡§™ ‡§∏‡§Æ‡§Ø ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç")
        return TIME

async def time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        user_data["pickup_time"] = update.message.text
        await update.message.reply_text("‚úÖ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç")
        return PRICE

async def price_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        user_data["price"] = update.message.text
        await update.message.reply_text("üéØ ‡§Ü‡§™‡§ï‡§æ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≤‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à!\n‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!\n\n[‡§™‡•Å‡§∞‡§∏‡•ç‡§ï‡§æ‡§∞ ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è www.theScrapCo.com ‡§™‡§∞ ‡§è‡§ï ‡§ñ‡§æ‡§§‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç]")
        
        # Printing all data for debugging
        print("User Data:", user_data)
        
        # TODO: Store this data in Supabase
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("‚ùå ‡§Ü‡§™‡§ï‡§æ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à!")
    return ConversationHandler.END

if __name__ == "__main__":
    app = Application.builder().token("YOUR_BOT_TOKEN").build()

    # Conversation Handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={
            IMAGE: [MessageHandler(filters.PHOTO, image_handler)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, address_handler)],
            MATERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, material_handler)],
            QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, quantity_handler)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, time_handler)],
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, price_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    
    print("Bot is running...üöÄ")
    app.run_polling(poll_interval=3)

